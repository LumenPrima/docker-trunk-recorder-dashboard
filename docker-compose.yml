version: '3.8'

services:
  mongodb:
    image: mongo:latest
    restart: unless-stopped
    command: [
      "--replSet", "rs0",
      "--bind_ip_all",
      "--setParameter", "enableTestCommands=1"
    ]
    volumes:
      - ./data/mongodb:/data/db
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.runCommand(\"ping\").ok'"]
      interval: 10s
      timeout: 5s
      retries: 5
    user: "${UID:-1000}:${GID:-1000}"

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./data:/app/data
      - ./package.json:/app/package.json
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - DB_NAME=trunk_recorder
      - COLLECTION_NAME=radio_events
      - SYSTEM_FILTERS=${SYSTEM_FILTERS:-hamco|Hamilton P25,warco|Warren P25,butco|Butler P25,monco|Montgomery P25}
      - NODE_ENV=development
    depends_on:
      mongodb:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ingest:
    build:
      context: .
      dockerfile: Dockerfile.ingest
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - DB_NAME=trunk_recorder
      - COLLECTION_NAME=radio_events
      - HTTP_MONGO_PORT=3001
    depends_on:
      mongodb:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Initialize MongoDB Replica Set
  mongo-init:
    image: mongo:latest
    restart: "no"
    depends_on:
      - mongodb
    command: >
      bash -c "
        echo 'Waiting for MongoDB to start...' &&
        until mongosh --host mongodb:27017 --eval 'db.runCommand(\"ping\").ok' >/dev/null 2>&1; do
          echo 'Waiting for MongoDB to be ready...'
          sleep 2
        done &&
        echo 'MongoDB is ready, initializing replica set...' &&
        mongosh --host mongodb:27017 --eval '
          config = {
            _id: \"rs0\",
            members: [
              { _id: 0, host: \"mongodb:27017\", priority: 1 }
            ],
            settings: {
              chainingAllowed: true,
              heartbeatTimeoutSecs: 10,
              electionTimeoutMillis: 10000,
              catchUpTimeoutMillis: -1
            }
          };
          rs.initiate(config);
        ' &&
        echo 'Waiting for replica set to be ready...' &&
        until mongosh --host mongodb:27017 --eval 'rs.status().ok && rs.status().members.length > 0 && rs.status().members[0].stateStr === \"PRIMARY\"' >/dev/null 2>&1; do
          echo 'Waiting for replica set to be ready...'
          sleep 2
        done &&
        echo 'Replica set is ready and PRIMARY'
      "
    networks:
      - trunk_network

networks:
  trunk_network:
    driver: bridge
