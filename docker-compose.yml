services:
  mongodb:
    image: mongo:latest
    restart: unless-stopped
    command: [
      "--replSet", "rs0",
      "--bind_ip_all",
      "--setParameter", "enableTestCommands=1",
      "--setParameter", "diagnosticDataCollectionEnabled=false"
    ]
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  dashboard:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./data:/app/data
      - ./package.json:/app/package.json
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - DB_NAME=trunk_recorder
      - COLLECTION_NAME=radio_events
      - SYSTEM_FILTERS=${SYSTEM_FILTERS:-hamco|Hamilton P25,warco|Warren P25,butco|Butler P25,monco|Montgomery P25}
      - NODE_ENV=development
      - UID=${UID:-1000}
      - GID=${GID:-1000}
    depends_on:
      mongodb:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  ingest:
    build:
      context: .
      dockerfile: Dockerfile.ingest
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017/?replicaSet=rs0&directConnection=true
      - DB_NAME=trunk_recorder
      - COLLECTION_NAME=radio_events
      - HTTP_MONGO_PORT=3001
      - UID=${UID:-1000}
      - GID=${GID:-1000}
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      mongodb:
        condition: service_healthy
      mongo-init:
        condition: service_completed_successfully
    networks:
      - trunk_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Initialize MongoDB Replica Set and Collections
  mongo-init:
    image: mongo:latest
    restart: "no"
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    command: >
      bash -c '
        echo "Waiting for MongoDB to start..." &&
        sleep 10 &&
        mongosh --host mongodb:27017 /docker-entrypoint-initdb.d/mongo-init.js
      '
    networks:
      - trunk_network

networks:
  trunk_network:
    driver: bridge
